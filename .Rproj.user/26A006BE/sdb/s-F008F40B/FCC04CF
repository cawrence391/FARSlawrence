{
    "collab_server" : "",
    "contents" : "#' Read in fars data\n#'\n#' This function reads and returns a dataframe of the specified file\n#'\n#'@param filename character string of full filename with extension\n#'@return dataframe of filename data\n#'\n#'@importFrom readr read_csv\n#'@importFrom dplyr tbl_df\n#'\n#'@examples\n#'\\dontrun{\n#'fars_read(\"accident_2013.csv.bz2\")\n#'}\n#'\n#'@note Input must be character string with full extension and file location must be correct\n#'\n#'@export\n#'\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n\n#' Generate file name string from year\n#'\n#' This function generates a standardised filename string with csv.bz2 extension based on the year defined by the user\n#'\n#' @param year integer of year\n#' @return string representing standard filename of format \"accident_<year>.csv.bz2\"\n#'\n#' @examples make_filename(2014)\n#'\n#' @note Function does not accept vectors containing multiple numerics\n#'\n#\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  system.file(\"extdata\", sprintf(\"accident_%d.csv.bz2\", year), package =\"FARS\")\n}\n\n#' Read in multiple fars files retuning list of dataframes\n#'\n#' This function returns individual data frames from raw fars files\n#'\n#' @param years numeric vector defining years to read in from raw file\n#' @return dataframes based on each yearly raw fars file\n#'\n#' @examples\n#' \\dontrun{\n#' fars_read_years(2013:2015)\n#' }\n#'\n#' @importFrom readr read_csv\n#' @importFrom dplyr mutate select\n#' @import magrittr\n#'\n#' @export\n#'\n#' @note Files must be in working directory and filenames must be of format \"accident_<year>.csv.bz2\"\nfars_read_years <- function(years) {\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n\n#' Summary table of number of incidents per month per year\n#'\n#' This function generates a summary table of the number incidents per calendar month in each of the yearly files defined\n#'\n#' @inheritParams fars_read_years\n#' @return table summarising the number incidents per calendar month (represented as rows) in each year (represented in columns)\n#'\n#' @examples\n#' \\dontrun{\n#' fars_summarize_years(2013:2015)\n#' }\n#'\n#' @importFrom readr read_csv\n#' @importFrom tidyr spread\n#' @import magrittr\n#' @import dplyr\n#'\n#' @export\n#'\n#' @note Files must be in working directory and filenames must be of format \"accident_<year>.csv.bz2\"\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n#' Plot incidents from a single year on state map\n#'\n#' This function genreates a plot showing the location of each incident in the defined year and state\n#'\n#' @param state.num Serial number of state - integer\n#' @param year year to plot - integer\n#' @return plot with state map outlined and incident location shown as points on the map\n#'\n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df filter\n#' @importFrom maps map\n#' @importFrom graphics points\n#' @import magrittr\n#'\n#' @export\n#'\n#' @examples\n#'\n#' \\dontrun{\n#' fars_map_state(1, 2013)\n#' }\n#'\n#' @note Files must be in working directory and filenames must be of format \"accident_<year>.csv.bz2\"\n#'\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n",
    "created" : 1506442571481.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "762729991",
    "id" : "FCC04CF",
    "lastKnownWriteTime" : 1506445829,
    "last_content_update" : 1506445829343,
    "path" : "~/FARS/R/fars.R",
    "project_path" : "R/fars.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}